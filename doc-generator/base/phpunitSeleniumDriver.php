<?php
/**
 * This class extended from {@link PHPUnit_Extensions_SeleniumTestCase_Driver} for easy export of available selenium
 * commands
 * (see {@link phpunitSeleniumDriver::getAvailableSeleniumCommands})
 */

namespace phpdocSeleniumGenerator;


use phpdocSeleniumGenerator\models\ReturnValue;

class phpunitSeleniumDriver extends \PHPUnit_Extensions_SeleniumTestCase_Driver
{
    /**
     * @var array Methods, that handled in PHPUnit_Extensions_SeleniumTestCase_Driver::__call,
     *            but not presented in DocBlock of this method.
     *            Format: ['methodName' => 'returnType']
     */
    protected $manualAddedMethods = [
        'captureEntirePageScreenshotToString' => ReturnValue::TYPE_VOID,  // in DocBlock only *AndWait version
        'captureScreenshot'                   => ReturnValue::TYPE_VOID,  // in DocBlock only *AndWait version
        'captureScreenshotToString'           => ReturnValue::TYPE_VOID,  // in DocBlock only *AndWait version
        'waitForFrameToLoad'                  => ReturnValue::TYPE_VOID,  // in DocBlock not presented

        // not selenium commands - driver methods
        'setBrowser'                          => ReturnValue::TYPE_VOID,  // to configure the Selenium Server session in ::setUp()
        'setBrowserUrl'                       => ReturnValue::TYPE_VOID,  // to configure the Selenium Server session in ::setUp()
        'setHost'                             => ReturnValue::TYPE_VOID,  // to configure the Selenium Server session in ::setUp()
        'setPort'                             => ReturnValue::TYPE_VOID,  // to configure the Selenium Server session in ::setUp()
        'setTimeout'                          => ReturnValue::TYPE_VOID,  // to configure the Selenium Server session in ::setUp()
        'setSleep'                            => ReturnValue::TYPE_VOID,  // to configure the Selenium Server session in ::setUp()
    ];

    protected $manualExcludedMethods = [
        'getSpeedAndWait',      // getSpeed - is Accessor (not Action, therefore must not be contain *AndWait postfix)
        'assertNotSpeedAndWait',
        'assertSpeedAndWait',
        'storeSpeedAndWait',
        'verifyNotSpeedAndWait',
        'verifySpeedAndWait',
        'waitForNotSpeedAndWait',
        'waitForSpeedAndWait',

        // cannot use reserved keywords as function or method names: http://php.net/manual/en/reserved.keywords.php
        'echo',
        'break',

        // deprecated commands (removed from current version)
        'assertCssCount',
        'assertNotCssCount',
        'getCssCount',
        'storeCssCount',
        'verifyCssCount',
        'verifyNotCssCount',
        'waitForCssCount',
        'waitForNotCssCount',

        // deprecated commands (removed already from Selenium Core 0.8.3)
        'assertLogMessages',
        'assertNotLogMessages',
        'getLogMessages',
        'storeLogMessages',
        'verifyLogMessages',
        'verifyNotLogMessages',
        'waitForLogMessages',
        'waitForNotLogMessages',
    ];

    /**
     * Returns array of virtual methods (available selenium commands). Array will be sorted by keys (methodName).
     *
     * @return array Array of methods in format: ['methodName' => 'returnType']
     * @throws \Exception
     */
    public function getAvailableSeleniumCommands()
    {
        $methods = $this->_getBaseMethods()     // contain duplicate methods: waitForElementPresent and waitForElementNotPresent
            + $this->_getAutoGeneratedMethods()
            + $this->manualAddedMethods;
        $methods = Helper::filterByKeys($methods, null, $this->manualExcludedMethods);
        ksort($methods);

        return $methods;
    }

    /**
     * Parses list of methods from DocBlock of method PHPUnit_Extensions_SeleniumTestCase_Driver::__call
     *
     * @return array Array of methods in format: ['methodName' => 'returnType']
     * @throws \Exception
     */
    private function _getBaseMethods()
    {
        $method     = new \ReflectionMethod(__CLASS__, '__call');
        $docComment = $method->getDocComment();

        $methods = [];
        if (preg_match_all('(@method\s+(\w+)\s+([\w]+)\((.*)\))', $docComment, $matches)) {
            foreach ($matches[2] as $methodKey => $method) {
                $methods[$method] = $this->_returnTypeConvert($matches[1][$methodKey]);
            }
        } else {
            throw new \Exception('Error at parsing of virtual methods of PHPUnit_Extensions_SeleniumTestCase_Driver::__call');
        }
        return $methods;
    }

    /**
     * Gets list of automatically generated methods (assert*, verify*, waitFor*, store*)
     *
     * @return array Array of methods in format: ['methodName' => 'returnType']
     */
    private function _getAutoGeneratedMethods()
    {
        $methods = [];
        foreach (static::$autoGeneratedCommands as $commandName => $dummy) {
            $methods[$commandName] = ReturnValue::TYPE_VOID;    // because only Action type commands
        }
        return $methods;
    }

    /**
     * Converts "phpunit" returnType (that used in DocBlock of class) to correct phpDoc variable type
     *
     * @param string $phpunitReturnType
     *
     * @return string
     * @see http://phpdoc.org/docs/latest/references/phpdoc/types.html
     */
    private function _returnTypeConvert($phpunitReturnType)
    {
        switch ($phpunitReturnType) {
            case 'unknown':
                return ReturnValue::TYPE_VOID;
            case 'string':
                return ReturnValue::TYPE_STRING;
            case 'boolean':
                return ReturnValue::TYPE_BOOL;
            case 'integer':
                return ReturnValue::TYPE_INT;       // actually is a string that contains an integer
            case 'array':
                return ReturnValue::TYPE_STRING_ARRAY;
            default:
                return $phpunitReturnType;
        }
    }
}